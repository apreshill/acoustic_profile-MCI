xlab("Condition") +
ylab("Cepstral Peak Prominence") +
ylim(69.5, 71.5) +
geom_signif(comparisons = list(c("HC", "MCI")), annotation=formatC("**", digits=4),  textsize=6) +
haristheme + scale_fill_grey(start = 0.9, end = 0.6)
cpp_ci_gplot
# center_of_gravity  ---------------------------------------------------------------
cogplot= ggplot(d, aes(x = condition, y = center_of_gravity, fill = gender)) +
#stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Center of Gravity") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
scale_y_continuous(limits = quantile(d$center_of_gravity, c(0.1, 0.9))) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Center of Gravity"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
cogplot
center_of_gravitym <- lmer( center_of_gravity~condition+(1|speaker) , data = d)
center_of_gravitym1 <- lm( center_of_gravity~condition, data = d)
summary(center_of_gravitym)
summary(center_of_gravitym1)
AIC(center_of_gravitym,center_of_gravitym1)
pd <- position_dodge(0.1) # move them .05 to the left and right
center_of_gravity_ci <- summarySE(d, measurevar="center_of_gravity", groupvars=c("condition"), na.rm=TRUE)
center_of_gravity_ci_gplot = ggplot(center_of_gravity_ci, aes(x=condition, y=center_of_gravity, fill="condition")) +
geom_errorbar(aes(ymin=center_of_gravity-ci, ymax=center_of_gravity+ci), size=1.5, width=.1, position=pd) +
geom_line(position=pd, size=1) +
geom_point(position=pd, size=3.5) +
geom_signif(comparisons = list(c("HC", "MCI")), annotation=formatC("*", digits=4),  textsize=6) +
ylim(380,1000) +
xlab("Condition") +
ylab("Center of Gravity") + haristheme + scale_fill_grey(start = 0.9, end = 0.6)
center_of_gravity_ci_gplot
apa.reg.table(center_of_gravitym1, filename = "Table3_cog.doc", table.number = 4)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(center_of_gravitym, type = "pred",  terms = c("condition"))
# Hammarberg_index  ---------------------------------------------------------------
hiplot = ggplot(d, aes(x = condition, y = Hammarberg_index, fill = gender)) +
#stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Hammarberg Index") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
#scale_y_continuous(limits = quantile(d$Hammarberg_index, c(0, 0.01))) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Hammarberg Index"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
hiplot
Hammarberg_indexm <- lmer(Hammarberg_index~condition*gender+(1|speaker) , data = d)
Hammarberg_indexm1 <- lm(Hammarberg_index~condition, data = d)
AIC(Hammarberg_indexm, Hammarberg_indexm1)
summary(Hammarberg_indexm)
summary(Hammarberg_indexm1)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(Hammarberg_indexm, type = "pred",  terms = c("condition"))
# Energy_Profile__250Hz  ---------------------------------------------------------------
e250plot=ggplot(d, aes(x = condition, y = Energy_Profile__250Hz, fill = gender)) +
#  stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Energy below 250Hz") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
#scale_y_continuous(limits = (c(0, 1))) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Energy below 250Hz"
) +  theme_minimal() +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
e250plot
Energy_Profile__250Hzm <- lmer(Energy_Profile__250Hz~condition*gender+(1|speaker) , data = d)
summary(Energy_Profile__250Hzm)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(Energy_Profile__250Hzm, type = "pred",  terms = c("condition"))
# Energy_below_500Hz  ---------------------------------------------------------------
e500plot=ggplot(d, aes(x = condition, y = energy_below_500Hz, fill = gender)) +
#  stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Energy below 500Hz") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
scale_y_continuous(limits = (c(0, 1))) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Energy below 500Hz"
) +  theme_minimal() +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
e500plot
energy_below_500Hzm <- lmer(energy_below_500Hz~condition*gender+(1|speaker) , data = d)
energy_below_500Hzm1 <- lm(energy_below_500Hz~condition*gender, data = d)
summary(energy_below_500Hzm)
summary(energy_below_500Hzm1)
AIC(energy_below_500Hzm,energy_below_500Hzm1)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(energy_below_500Hzm, type = "pred",  terms = c("condition"))
# Energy_below_1000Hz  ---------------------------------------------------------------
e1000plot=ggplot(d, aes(x = condition, y = energy_below_1000Hz, fill = gender)) +
#stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Energy below 1000Hz") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
#scale_y_continuous(limits = quantile(d$energy_below_1000Hz, c(0, 1))) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Energy below 1000Hz"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
e1000plot
energy_below_1000Hzm <- lmer(energy_below_1000Hz~condition*gender+(1|speaker) , data = d)
energy_below_1000Hzm1 <- lm(energy_below_1000Hz~condition*gender, data = d)
summary(energy_below_1000Hzm)
summary(energy_below_1000Hzm1)
AIC(energy_below_1000Hzm,energy_below_1000Hzm1)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(energy_below_1000Hzm, type = "pred",  terms = c("condition"))
# F_dispersion1_3  ---------------------------------------------------------------
ggplot(d, aes(x = condition, y = F_dispersion1_3, fill = gender)) +
stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Average Distance from F1 to F3") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
#  scale_y_continuous(limits = quantile(d$h1.h2, c(0, 1))) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Average Distance from F1 to F3"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
F_dispersion1_3m <- lmer(F_dispersion1_3~condition+(1|speaker) , data = d)
summary(F_dispersion1_3m)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(F_dispersion1_3m, type = "pred",  terms = c("condition"))
# F_dispersion1_5  ---------------------------------------------------------------
ggplot(d, aes(x = condition, y = F_dispersion1_5, fill = gender)) +
stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Average Distance from F1 to F5") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
#  scale_y_continuous(limits = quantile(d$h1.h2, c(0, 1))) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Average Distance from F1 to F5"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
F_dispersion1_5m <- lmer(F_dispersion1_5~condition+(1|speaker) , data = d)
summary(F_dispersion1_5m)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(F_dispersion1_5m, type = "pred",  terms = c("condition"))
grid.arrange(h1h2p1, H1A1plot, H1A3plot, formh1h2p1, cpp_plot, cogplot, hiplot, e500plot, e1000plot, nrow = 3, ncol=4)
grid.arrange(cpp_plot, cogplot, hiplot, e250plot, e500plot, e1000plot, nrow = 2, ncol=3)
# median_pitch  ---------------------------------------------------------------
median_pitchp1 = ggplot(d, aes(x = condition, y = median_pitch, fill = gender)) +
# stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Median Pitch") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
#scale_y_continuous(limits = c(0, 400)) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Median Pitch"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
median_pitchp1
median_pitchm <- lmer(median_pitch~condition*gender+(1|speaker), data = d)
summary(median_pitchm)
median_pitchm1 <- lm(median_pitch~condition*gender, data = d)
summary(median_pitchm1)
median_pitchp2 = plot_model(median_pitchm, type = "pred",  terms = c("condition")) +
ggtitle("Predicted Median Pitch") +
scale_x_discrete(name = "PPA conditions")  +
scale_y_continuous(limits = c(0, 400)) +
scale_fill_brewer(palette = "Blues") +
labs(
fill = "condition",
x = "PPA conditions",
y = "Predicted Median Pitch"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
median_pitchp2
grid.arrange(median_pitchp1, median_pitchp2, nrow = 1)
# Jitter  ---------------------------------------------------------------
jitterplot = ggplot(d, aes(x = condition, y = jitter, fill = gender)) +
#  stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Jitter") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
scale_y_continuous(limits = c(0,0.10)) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Jitter"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
jitterplot
jitterm <- lmer(jitter~condition+(1|speaker) , data = d) # interaction not possible
summary(jitterm)
jitterm1 <- lm(jitter~condition, data = d)
summary(jitterm1)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(jitterm, type = "pred",  terms = c("condition"))
# Shimmer  ---------------------------------------------------------------
shimmerplot = ggplot(d, aes(x = condition, y = shimmer, fill = gender)) +
#  stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Shimmer") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
scale_y_continuous(limits = c(0, 0.3)) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Shimmer"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
shimmerplot
pd <- position_dodge(0.1) # move them .05 to the left and right
shimmer_ci <- summarySE(d, measurevar="shimmer", groupvars=c("condition"), na.rm=TRUE)
shimmer_ci_gplot = ggplot(shimmer_ci, aes(x=condition, y=shimmer, fill="condition")) +
geom_errorbar(aes(ymin=shimmer-ci, ymax=shimmer+ci), size=1.5, width=.1, position=pd) +
geom_line(position=pd, size=1) +
geom_point(position=pd, size=3.5) +
geom_signif(comparisons = list(c("HC", "MCI")), annotation=formatC("*", digits=4),  textsize=6) +
ylim(0.10, 0.145) +
xlab("Condition") +
ylab("Shimmer") + haristheme + scale_fill_grey(start = 0.9, end = 0.6)
shimmer_ci_gplot
shimmerm <- lmer(shimmer~condition*gender+(1|speaker) , data = d)
summary(shimmerm)
shimmerm1 <- lm(shimmer~condition, data = d)
summary(shimmerm1)
apa.reg.table(shimmerm1, filename = "Table3_shimmer.doc", table.number = 4)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(shimmerm, type = "pred",  terms = c("condition"))
# Harmonicity  ---------------------------------------------------------------
harmonicityplot = ggplot(d, aes(x = condition, y = harmonicity, fill = gender)) +
#  stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA) +
ggtitle("Harmonicity") +
scale_x_discrete(name = "PPA conditions")  +
scale_fill_brewer(palette = "Blues") +
#  scale_y_continuous(limits = quantile(d$h1.h2, c(0, 0.3))) +
labs(
fill = "condition",
x = "PPA conditions",
y = "Harmonicity"
) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
harmonicityplot
harmonicitym <- lmer(harmonicity~condition*gender+(1|speaker) , data = d)
summary(harmonicitym)
harmonicitym1 <- lmer(harmonicity~condition*gender, data = d)
summary(harmonicitym1)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(harmonicitym, type = "pred",  terms = c("condition"))
grid.arrange(jitterplot, shimmerplot, harmonicityplot, ncol=3, nrow=1)
# Energy_Profile__250Hz  ---------------------------------------------------------------
e250plot = ggplot(d, aes(x = condition, y = Energy_Profile__250Hz, fill = gender)) +
scale_fill_brewer(palette = "Blues") +
# stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA)
e250plot
Energy_Profile__250Hzm <- lmer(Energy_Profile__250Hz~condition*gender+(1|speaker) , data = d)
summary(Energy_Profile__250Hzm)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(Energy_Profile__250Hzm, type = "pred",  terms = c("condition"))
# Energy_below_1000Hz  ---------------------------------------------------------------
eb1000 = ggplot(d, aes(x = condition, y = energy_below_1000Hz, fill = condition)) +
scale_fill_brewer(palette = "Blues") +
stat_summary(fun.y = mean, geom = "point") +
geom_boxplot( outlier.shape = NA)
eb1000
grid.arrange(cpp_plot, cogplot, hiplot, e250plot, e500plot, e1000plot, eb1000, nrow = 4)
energy_below_1000Hzm <- lmer(energy_below_1000Hz~condition+(1|speaker) , data = d)
summary(energy_below_1000Hzm)
library(sjmisc)
theme_set(theme_sjplot())
plot_model(energy_below_1000Hzm, type = "pred",  terms = c("condition"))
################ FIGURE
library("multipanelfigure")
cols <- 2
rows <- 2
figure <- multi_panel_figure(
width = 200,
columns = cols,
height = 200,
rows = rows)
(figure %<>% fill_panel(H1_A3_ci_gplot))
(figure %<>% fill_panel(cpp_ci_gplot))
(figure %<>% fill_panel(center_of_gravity_ci_gplot))
(figure %<>% fill_panel(shimmer_ci_gplot))
################################################
# this is the old file - not the one employed in the journal
################################################
# Clear Memory
rm(list = ls(all.names = TRUE))
#sink("vowel_stats_output_11_Aug_2018.txt")
set.seed(1000)
# Import Libraries in R
library("ggplot2")
library("gridExtra")
library("ez")
library("lme4")
library("emmeans")
library("car")
library("lmTest")
library("pracma")
library("gmodels")
library("klaR")
library("C50")
library("caret")
library("latticeExtra")
library("phonR")
library("plyr") # for renaming
library("xtable")
library("ggsignif")
library("plyr")
# Printing
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
options(digits=2)
options(scipen=999)
source("definitions.r")
# Definitions
.str <- function(x){
# Modified str() to display all list elements within a level.
# Charalambos Themistocleous 2015
str(x, list.len=length(x))
}
# Get the trimmed mean predefined value at the 10%
mean1 <- function(x,...){
mean(x,trim=.1)
}
haristheme <- theme(panel.background = element_rect(fill = "white", colour = "white"),
panel.border = element_blank(),
legend.title = element_blank(),
panel.grid.major = element_line(colour = "grey80"),
axis.line.x = element_line(colour = "black", size=1),
legend.position = "none", text = element_text(size=18),
plot.title = element_text(hjust = 0.5))
# Open Data ----------------------------------------------------
v <- read.csv("final.csv")
v <- v[!v$soundname == "LABM-75GG-5KH4",]
v <- v[!v$Materials == "new_random",]
summary(is.na(v))
v$MMSE <- as.numeric(v$MMSE)
v$npause <- as.numeric(v$npause)
v$nsyll <- as.numeric(v$nsyll)
v$phonationtime..s. <- as.numeric(v$phonationtime..s.)
v$speechrate..nsyll.dur. <- as.numeric(v$speechrate..nsyll.dur.)
v$articulation.rate..nsyll...phonationtime. <- as.numeric(v$articulation.rate..nsyll...phonationtime.)
v$ASD..speakingtime.nsyll.  <- as.numeric(v$ASD..speakingtime.nsyll.)
b = v[complete.cases(v$MMSE),]
### Differences between new and old materials
MCI_SCI <- b[!b$condition=="HC",]
MCI_SCI <- droplevels(MCI_SCI)
t.test(MCI_SCI$MMSE~MCI_SCI$Materials)
t.test(MCI_SCI$phonationtime..s.~MCI_SCI$Materials)
t.test(MCI_SCI$speechrate..nsyll.dur.~MCI_SCI$Materials) # only this is sigificant
t.test(MCI_SCI$articulation.rate..nsyll...phonationtime.~MCI_SCI$Materials)
t.test(MCI_SCI$ASD..speakingtime.nsyll.~MCI_SCI$Materials)
### MMSE
cor(b$npause,b$MMSE,  method=c("spearman"))
cor(b$nsyll,b$MMSE,  method=c("spearman"))
cor(b$phonationtime..s.,b$MMSE,  method=c("spearman")) # Phonation time seems to correlate with MMSE
cor(b$speechrate..nsyll.dur.,b$MMSE,  method=c("spearman"))
cor(b$articulation.rate..nsyll...phonationtime.,b$MMSE,  method=c("spearman"))
cor(b$ASD..speakingtime.nsyll.,b$MMSE,  method=c("spearman"))
### Differences between MCI and SCI
summary(aov(MCI_SCI$MMSE~MCI_SCI$condition))
summary(aov(MCI_SCI$phonationtime..s.~MCI_SCI$condition))
summary(aov(MCI_SCI$speechrate..nsyll.dur.~MCI_SCI$condition)) # only this is sigificant
summary(aov(MCI_SCI$articulation.rate..nsyll...phonationtime.~MCI_SCI$condition))
summary(aov(MCI_SCI$ASD..speakingtime.nsyll.~MCI_SCI$condition))
### Differences between MCI and HC
MCI_HC <- b[!b$condition=="SCI",]
MCI_HC <- droplevels(MCI_HC)
t.test(MCI_HC$phonationtime..s.~MCI_HC$condition)
t.test(MCI_HC$speechrate..nsyll.dur.~MCI_HC$condition)
# Speech Rate
speechrate..nsyll.dur.m= lm(MCI_HC$speechrate..nsyll.dur.~MCI_HC$condition)
summary(speechrate..nsyll.dur.m)
pd <- position_dodge(0.1) # move them .05 to the left and right
speechrate..nsyll.dur._ci <- summarySE(MCI_HC, measurevar="speechrate..nsyll.dur.", groupvars=c("condition"), na.rm=TRUE)
speechrate_ci_gplot = ggplot(speechrate..nsyll.dur._ci, aes(x=condition, y=speechrate..nsyll.dur., fill="condition")) +
geom_errorbar(aes(ymin=speechrate..nsyll.dur.-ci, ymax=speechrate..nsyll.dur.+ci), size=1.5, width=.1, position=pd) +
geom_line(position=pd, size=1) +
geom_point(position=pd, size=3.5) +
xlab("Condition") +
ylab("Speech Rate") +
ylim(40,75) +
geom_signif(comparisons = list(c("HC", "MCI")), annotation=formatC(".", digits=4),  textsize=6) +
haristheme + scale_fill_grey(start = 0.9, end = 0.6)
speechrate_ci_gplot
library(apaTables)
speechrate..nsyll.dur.m = lm(MCI_HC$speechrate..nsyll.dur.~MCI_HC$condition)
summary(speechrate..nsyll.dur.m)
apa.reg.table(speechrate..nsyll.dur.m, filename = "Averaged Speaking Time.doc", table.number = 2)
boxplot(MCI_HC$speechrate..nsyll.dur.m~MCI_HC$condition)
speaking = lm(MCI_HC$ASD..speakingtime.nsyll.~MCI_HC$condition)
summary(speaking)
plot_model(speaking, type = "pred",  terms = c("condition"))
boxplot(MCI_HC$ASD..speakingtime.nsyll.~MCI_HC$condition)
speakingtime_plot = ggplot(MCI_HC, aes(x = condition, y = ASD..speakingtime.nsyll.)) +
#  stat_summary(fun.y = mean, geom = "point") +
geom_boxplot(aes(fill = condition), outlier.shape = NA) +
ggtitle("Average Syllable Duration") +
scale_x_discrete(name = "Condition")  +
scale_fill_brewer(palette = "Blues") +
scale_y_continuous(limits = quantile(MCI_HC$ASD..speakingtime.nsyll., c(0.1, 0.9))) +
labs(
fill = "condition",
x = "Condition",
y = "Average Syllable Duration"
) + theme_classic()+
geom_signif(comparisons = list(c("HC", "MCI")), annotation=formatC("**", digits=4),  textsize=6) +
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
speakingtime_plot
pd <- position_dodge(0.1) # move them .05 to the left and right
ASD..speakingtime.nsyll._ci <- summarySE(MCI_HC, measurevar="ASD..speakingtime.nsyll.", groupvars=c("condition"), na.rm=TRUE)
ASD_ci_gplot = ggplot(ASD..speakingtime.nsyll._ci, aes(x=condition, y=ASD..speakingtime.nsyll., fill="condition")) +
geom_errorbar(aes(ymin=ASD..speakingtime.nsyll.-ci, ymax=ASD..speakingtime.nsyll.+ci), size=1.5, width=.1, position=pd) +
geom_line(position=pd, size=1) +
geom_point(position=pd, size=3.5) +
xlab("Condition") +
ylab("Averaged Syllable Duration") +
ylim(30,60) +
geom_signif(comparisons = list(c("HC", "MCI")), annotation=formatC("**", digits=4),  textsize=6) +
haristheme + scale_fill_grey(start = 0.9, end = 0.6)
ASD_ci_gplot
library(apaTables)
speaking_model = lm(MCI_HC$ASD..speakingtime.nsyll.~MCI_HC$condition)
summary(speaking_model)
apa.reg.table(speaking_model, filename = "Averaged_Syllable_Duration.doc", table.number = 2)
articulation_rate = lm(MCI_HC$articulation.rate..nsyll...phonationtime.~MCI_HC$condition)
summary(articulation_rate)
apa.reg.table(articulation_rate, filename = "Articulation_Rate.doc", table.number = 2)
articulation_rate_plot = ggplot(MCI_HC, aes(x = condition, y = articulation.rate..nsyll...phonationtime.)) +
#  stat_summary(fun.y = mean, geom = "point") +
geom_boxplot(aes(fill = condition), outlier.shape = NA) +
ggtitle("Articulation Rate") +
scale_x_discrete(name = "Condition")  +
scale_fill_brewer(palette = "Blues") +
geom_signif(comparisons = list(c("HC", "MCI")), annotation=formatC("**", digits=4),  textsize=6) +
scale_y_continuous(limits = quantile(MCI_HC$ASD..speakingtime.nsyll., c(0.1, 0.9))) +
labs(
fill = "condition",
x = "Condition",
y = "Articulation Rate"
) + theme_classic()+
theme(legend.position="top", legend.title = element_blank(), text = element_text(size=20), plot.title = element_text(hjust = 0.5),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
articulation_rate_plot
pd <- position_dodge(0.1) # move them .05 to the left and right
articulation.rate..nsyll...phonationtime._ci <- summarySE(MCI_HC, measurevar="articulation.rate..nsyll...phonationtime.", groupvars=c("condition"), na.rm=TRUE)
articulation.rate_ci_gplot = ggplot(articulation.rate..nsyll...phonationtime._ci, aes(x=condition, y=articulation.rate..nsyll...phonationtime., fill="condition")) +
geom_errorbar(aes(ymin=articulation.rate..nsyll...phonationtime.-ci, ymax=articulation.rate..nsyll...phonationtime.+ci), size=1.5, width=.1, position=pd) +
geom_line(position=pd, size=1) +
geom_point(position=pd, size=3.5) +
xlab("Condition") +
ylab("Articulation Rate") +
ylim(40,75) +
geom_signif(comparisons = list(c("HC", "MCI")), annotation=formatC("**", digits=4),  textsize=6) +
haristheme + scale_fill_grey(start = 0.9, end = 0.6)
articulation.rate_ci_gplot
library("multipanelfigure")
cols <- 2
rows <- 2
figure <- multi_panel_figure(
width = 220,
columns = cols,
height = 220,
rows = rows)
(figure %<>% fill_panel(ASD_ci_gplot))
(figure %<>% fill_panel(articulation.rate_ci_gplot))
(figure %<>% fill_panel(speechrate_ci_gplot))
library("multipanelfigure")
cols <- 2
rows <- 2
figure <- multi_panel_figure(
width = 200,
columns = cols,
height = 200,
rows = rows)
(figure %<>% fill_panel(ASD_ci_gplot))
(figure %<>% fill_panel(articulation.rate_ci_gplot))
(figure %<>% fill_panel(speechrate_ci_gplot))
